[
  {
    "Title": "unique_char_strings_average",
    "Description": "Write a function which takes a list of strings as an argument. Find strings from the input list where all characters are unique. Return average length of strings.\n\ndef unique_char_strings_average(strings_list):",
    "Solution": "def unique_char_strings_average(strings_list):\n    unique_strings = [s for s in strings_list if len(set(s)) == len(s)]\n    return round(sum(len(s) for s in unique_strings) // len(unique_strings), 2) if unique_strings else 0",
    "Score": "1",
    "Input 1": "[\"apple\", \"orange\", \"abc\", \"hello\", \"world\", \"xyz\"]",
    "Output 1": "4",
    "Input 2": "[\"abcd\", \"aabb\", \"xyz\", \"mnop\", \"pqr\", \"aaaa\"]",
    "Output 2": "3",
    "Input 3": "[\"hello\", \"abcdef\", \"unique\", \"yes\", \"no\"]",
    "Output 3": "4",
    "Input 4": "[\"test\", \"data\", \"science\", \"python\"]",
    "Output 4": "5",
    "Input 5": "[\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\", \"uvwx\", \"yz\"]",
    "Output 5": "4",
    "Input 6": "[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
    "Output 6": "3",
    "Input 7": "[\"code\", \"fun\", \"happy\", \"good\", \"day\"]",
    "Output 7": "3",
    "Input 8": "[\"abcd\", \"xyz\", \"pqrs\", \"lmno\", \"wxyz\"]",
    "Output 8": "4"
  },
  {
    "Title": "find_anagram_group_number",
    "Description": "Write a function that takes a list of words and returns number of anagram words groups.\n\ndef find_anagram_group_number(word_list):",
    "Solution": "from collections import defaultdict\n\ndef find_anagram_group_number(word_list):\n    groups = defaultdict(list)\n    for word in word_list:\n        groups[''.join(sorted(word))].append(word)\n    return len(groups)",
    "Score": "1",
    "Input 1": "[\"listen\", \"silent\", \"enlist\", \"rat\", \"tar\", \"art\", \"cat\", \"tac\"]",
    "Output 1": "3",
    "Input 2": "[\"aab\", \"baa\", \"ccc\"]",
    "Output 2": "2",
    "Input 3": "[\"abc\", \"bca\", \"cab\", \"xyz\", \"zyx\", \"lmn\"]",
    "Output 3": "3",
    "Input 4": "[\"dog\", \"god\", \"odg\", \"hello\", \"world\"]",
    "Output 4": "3",
    "Input 5": "[\"top\", \"pot\", \"opt\", \"note\", \"tone\", \"stone\"]",
    "Output 5": "3",
    "Input 6": "[\"bat\", \"tab\", \"eat\", \"tea\", \"ate\", \"tan\", \"nat\"]",
    "Output 6": "4",
    "Input 7": "[\"car\", \"arc\", \"cat\", \"act\", \"rat\", \"tar\", \"art\"]",
    "Output 7": "3",
    "Input 8": "[\"spot\", \"tops\", \"stop\", \"post\", \"opts\", \"hello\"]",
    "Output 8": "2"
  },
  {
    "Title": "split_three_digit_number",
    "Description": "Write a function that takes a three-digit integer (from 100 to 999) as an argument and returns a tuple containing its hundreds, tens, and units digits.\n\ndef split_three_digit_number(n):",
    "Solution": "def split_three_digit_number(n):\n    return (n // 100, (n % 100) // 10, n % 10)",
    "Score": "1",
    "Input 1": "365",
    "Output 1": "(3, 6, 5)",
    "Input 2": "999",
    "Output 2": "(9, 9, 9)",
    "Input 3": "123",
    "Output 3": "(1, 2, 3)",
    "Input 4": "801",
    "Output 4": "(8, 0, 1)",
    "Input 5": "700",
    "Output 5": "(7, 0, 0)",
    "Input 6": "408",
    "Output 6": "(4, 0, 8)",
    "Input 7": "100",
    "Output 7": "(1, 0, 0)",
    "Input 8": "555",
    "Output 8": "(5, 5, 5)"
  },
  {
    "Title": "sum_two_numbers",
    "Description": "Write a function that takes two integers as arguments and returns their sum.\n\ndef sum_two_numbers(a, b):",
    "Solution": "def sum_two_numbers(a, b):\n    return a + b",
    "Score": "1",
    "Input 1": "5, 7",
    "Output 1": "12",
    "Input 2": "-3, 9",
    "Output 2": "6",
    "Input 3": "0, 0",
    "Output 3": "0",
    "Input 4": "10, -10",
    "Output 4": "0",
    "Input 5": "100, 200",
    "Output 5": "300",
    "Input 6": "1, 99",
    "Output 6": "100",
    "Input 7": "-50, -50",
    "Output 7": "-100",
    "Input 8": "999, 1",
    "Output 8": "1000"
  },
  {
    "Title": "max_of_three",
    "Description": "Write a function that takes three integers as arguments and returns the maximum value among them.\n\ndef max_of_three(a, b, c):",
    "Solution": "def max_of_three(a, b, c):\n    return max(a, b, c)",
    "Score": "1",
    "Input 1": "3, 7, 5",
    "Output 1": "7",
    "Input 2": "-1, -4, -2",
    "Output 2": "-1",
    "Input 3": "0, 0, 0",
    "Output 3": "0",
    "Input 4": "100, 99, 98",
    "Output 4": "100",
    "Input 5": "-10, -5, -1",
    "Output 5": "-1",
    "Input 6": "50, 60, 70",
    "Output 6": "70",
    "Input 7": "90, 90, 90",
    "Output 7": "90",
    "Input 8": "-100, -200, -150",
    "Output 8": "-100"
  },
  {
    "Title": "is_leap_year",
    "Description": "Write a function that takes a year as an argument and returns True if the year is a leap year, and False otherwise.\n\ndef is_leap_year(year):",
    "Solution": "def is_leap_year(year):\n    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)",
    "Score": "1",
    "Input 1": "2024",
    "Output 1": "True",
    "Input 2": "2023",
    "Output 2": "False",
    "Input 3": "2000",
    "Output 3": "True",
    "Input 4": "1900",
    "Output 4": "False",
    "Input 5": "1600",
    "Output 5": "True",
    "Input 6": "2100",
    "Output 6": "False",
    "Input 7": "1996",
    "Output 7": "True",
    "Input 8": "1800",
    "Output 8": "False"
  },
  {
    "Title": "area_of_rectangle",
    "Description": "Write a function that takes the length and width of a rectangle as arguments and returns its area.\n\ndef area_of_rectangle(length, width):",
    "Solution": "def area_of_rectangle(length, width):\n    return length * width",
    "Score": "1",
    "Input 1": "5, 10",
    "Output 1": "50",
    "Input 2": "7, 3",
    "Output 2": "21",
    "Input 3": "0, 4",
    "Output 3": "0",
    "Input 4": "10, 10",
    "Output 4": "100",
    "Input 5": "12, 5",
    "Output 5": "60",
    "Input 6": "1, 1",
    "Output 6": "1",
    "Input 7": "20, 0",
    "Output 7": "0",
    "Input 8": "15, 2",
    "Output 8": "30"
  },
  {
    "Title": "is_even",
    "Description": "Write a function that takes an integer as an argument and returns True if the number is even, and False if it is odd.\n\ndef is_even(n):",
    "Solution": "def is_even(n):\n    return n % 2 == 0",
    "Score": "1",
    "Input 1": "4",
    "Output 1": "True",
    "Input 2": "7",
    "Output 2": "False",
    "Input 3": "0",
    "Output 3": "True",
    "Input 4": "-2",
    "Output 4": "True",
    "Input 5": "-3",
    "Output 5": "False",
    "Input 6": "10",
    "Output 6": "True",
    "Input 7": "11",
    "Output 7": "False",
    "Input 8": "1001",
    "Output 8": "False"
  },
  {
    "Title": "square_number",
    "Description": "Write a function that takes an integer as an argument and returns its square.\n\ndef square_number(n):",
    "Solution": "def square_number(n):\n    return n * n",
    "Score": "1",
    "Input 1": "5",
    "Output 1": "25",
    "Input 2": "-3",
    "Output 2": "9",
    "Input 3": "0",
    "Output 3": "0",
    "Input 4": "10",
    "Output 4": "100",
    "Input 5": "2",
    "Output 5": "4",
    "Input 6": "8",
    "Output 6": "64",
    "Input 7": "-7",
    "Output 7": "49",
    "Input 8": "15",
    "Output 8": "225"
  },
  {
    "Title": "count_positive_numbers",
    "Description": "Write a function that takes a list of integers as an argument and returns the count of positive numbers in the list.\n\ndef count_positive_numbers(lst):",
    "Solution": "def count_positive_numbers(lst):\n    return sum(1 for x in lst if x > 0)",
    "Score": "1",
    "Input 1": "[-1, 2, 3, -4, 5]",
    "Output 1": "3",
    "Input 2": "[0, -2, -3, -1]",
    "Output 2": "0",
    "Input 3": "[1, 1, 1, 1]",
    "Output 3": "4",
    "Input 4": "[-10, -20, 0, 5]",
    "Output 4": "1",
    "Input 5": "[100, 200, 300]",
    "Output 5": "3",
    "Input 6": "[]",
    "Output 6": "0",
    "Input 7": "[0]",
    "Output 7": "0",
    "Input 8": "[7, -7, 14, -14]",
    "Output 8": "2"
  },
  {
    "Title": "find_smallest_number",
    "Description": "Write a function that takes a list of integers as an argument and returns the smallest number in the list.\n\ndef find_smallest_number(lst):",
    "Solution": "def find_smallest_number(lst):\n    return min(lst)",
    "Score": "1",
    "Input 1": "[4, 2, 8, 6]",
    "Output 1": "2",
    "Input 2": "[-3, -7, -1, -5]",
    "Output 2": "-7",
    "Input 3": "[0, 1, 2, 3]",
    "Output 3": "0",
    "Input 4": "[100]",
    "Output 4": "100",
    "Input 5": "[10, -10, 5, -5]",
    "Output 5": "-10",
    "Input 6": "[3, 3, 3, 3]",
    "Output 6": "3",
    "Input 7": "[1000, 500, 200, 100]",
    "Output 7": "100",
    "Input 8": "[-1, 0, 1]",
    "Output 8": "-1"
  },
  {
    "Title": "calculate_average",
    "Description": "Write a function that takes a list of numbers as an argument and returns the average value.\n\ndef calculate_average(lst):",
    "Solution": "def calculate_average(lst):\n    return sum(lst) / len(lst) if lst else 0",
    "Score": "1",
    "Input 1": "[10, 20, 30, 40, 50]",
    "Output 1": "30",
    "Input 2": "[5, 15, 25]",
    "Output 2": "15",
    "Input 3": "[100]",
    "Output 3": "100",
    "Input 4": "[]",
    "Output 4": "0",
    "Input 5": "[0, 0, 0, 0]",
    "Output 5": "0",
    "Input 6": "[1, 2, 3, 4]",
    "Output 6": "2.5",
    "Input 7": "[1]",
    "Output 7": "1",
    "Input 8": "[7, 14, 21]",
    "Output 8": "14"
  },
  {
    "Title": "celsius_to_fahrenheit",
    "Description": "Write a function that takes a temperature in Celsius as an argument and returns the equivalent temperature in Fahrenheit.\n\ndef celsius_to_fahrenheit(celsius):",
    "Solution": "def celsius_to_fahrenheit(celsius):\n    return celsius * 9 / 5 + 32",
    "Score": "1",
    "Input 1": "0",
    "Output 1": "32",
    "Input 2": "100",
    "Output 2": "212",
    "Input 3": "-40",
    "Output 3": "-40",
    "Input 4": "37",
    "Output 4": "98.6",
    "Input 5": "20",
    "Output 5": "68",
    "Input 6": "30",
    "Output 6": "86",
    "Input 7": "-10",
    "Output 7": "14",
    "Input 8": "15",
    "Output 8": "59"
  },
  {
    "Title": "is_prime",
    "Description": "Write a function that takes an integer greater than 1 as an argument and returns True if the number is prime, and False otherwise.\n\ndef is_prime(n):",
    "Solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
    "Score": "1",
    "Input 1": "7",
    "Output 1": "True",
    "Input 2": "10",
    "Output 2": "False",
    "Input 3": "2",
    "Output 3": "True",
    "Input 4": "17",
    "Output 4": "True",
    "Input 5": "20",
    "Output 5": "False",
    "Input 6": "1",
    "Output 6": "False",
    "Input 7": "19",
    "Output 7": "True",
    "Input 8": "25",
    "Output 8": "False"
  },
  {
    "Title": "factorial",
    "Description": "Write a function that takes a non-negative integer as an argument and returns its factorial.\n\ndef factorial(n):",
    "Solution": "def factorial(n):\n    result = 1\n    for i in range(2, n+1):\n        result *= i\n    return result",
    "Score": "1",
    "Input 1": "5",
    "Output 1": "120",
    "Input 2": "3",
    "Output 2": "6",
    "Input 3": "0",
    "Output 3": "1",
    "Input 4": "1",
    "Output 4": "1",
    "Input 5": "6",
    "Output 5": "720",
    "Input 6": "7",
    "Output 6": "5040",
    "Input 7": "8",
    "Output 7": "40320",
    "Input 8": "10",
    "Output 8": "3628800"
  },
  {
    "Title": "reverse_string",
    "Description": "Write a function that takes a string as an argument and returns the string reversed.\n\ndef reverse_string(s):",
    "Solution": "def reverse_string(s):\n    return s[::-1]",
    "Score": "1",
    "Input 1": "\"hello\"",
    "Output 1": "\"olleh\"",
    "Input 2": "\"Python\"",
    "Output 2": "\"nohtyP\"",
    "Input 3": "\"abc\"",
    "Output 3": "\"cba\"",
    "Input 4": "\"12345\"",
    "Output 4": "\"54321\"",
    "Input 5": "\"racecar\"",
    "Output 5": "\"racecar\"",
    "Input 6": "\"madam\"",
    "Output 6": "\"madam\"",
    "Input 7": "\"test\"",
    "Output 7": "\"tset\"",
    "Input 8": "\"a\"",
    "Output 8": "\"a\""
  },
  {
    "Title": "sum_of_digits",
    "Description": "Write a function that takes a number as an argument and returns the sum of its digits.\n\ndef sum_of_digits(n):",
    "Solution": "def sum_of_digits(n):\n    return sum(int(d) for d in str(n))",
    "Score": "1",
    "Input 1": "123",
    "Output 1": "6",
    "Input 2": "987",
    "Output 2": "24",
    "Input 3": "0",
    "Output 3": "0",
    "Input 4": "999",
    "Output 4": "27",
    "Input 5": "456",
    "Output 5": "15",
    "Input 6": "100",
    "Output 6": "1",
    "Input 7": "101",
    "Output 7": "2",
    "Input 8": "42",
    "Output 8": "6"
  },
  {
    "Title": "find_longest_word",
    "Description": "Write a function that takes a list of words and returns the longest word.\n\ndef find_longest_word(words):",
    "Solution": "def find_longest_word(words):\n    return max(words, key=len)",
    "Score": "1",
    "Input 1": "[\"apple\", \"banana\", \"cherry\", \"strawberry\"]",
    "Output 1": "\"strawberry\"",
    "Input 2": "[\"a\", \"abcd\", \"abc\"]",
    "Output 2": "\"abcd\"",
    "Input 3": "[\"short\", \"longer\", \"longest\"]",
    "Output 3": "\"longest\"",
    "Input 4": "[\"one\", \"three\"]",
    "Output 4": "\"three\"",
    "Input 5": "[\"hello\"]",
    "Output 5": "\"hello\"",
    "Input 6": "[\"hi\", \"hello\"]",
    "Output 6": "\"hello\"",
    "Input 7": "[\"tiny\", \"mini\"]",
    "Output 7": "\"tiny\"",
    "Input 8": "[\"aa\", \"aaa\", \"a\"]",
    "Output 8": "\"aaa\""
  },
  {
    "Title": "count_vowels",
    "Description": "Write a function that takes a string as an argument and returns the count of vowels in it.\n\ndef count_vowels(s):",
    "Solution": "def count_vowels(s):\n    return sum(1 for c in s.lower() if c in 'aeiou')",
    "Score": "1",
    "Input 1": "\"hello world\"",
    "Output 1": "3",
    "Input 2": "\"Python Programming\"",
    "Output 2": "5",
    "Input 3": "\"AEIOU\"",
    "Output 3": "5",
    "Input 4": "\"xyz\"",
    "Output 4": "0",
    "Input 5": "\"banana\"",
    "Output 5": "3",
    "Input 6": "\"AI is fun\"",
    "Output 6": "4",
    "Input 7": "\"vowels\"",
    "Output 7": "2",
    "Input 8": "\"\"",
    "Output 8": "0"
  },
  {
    "Title": "remove_duplicates",
    "Description": "Write a function that takes a list of numbers and returns a new list with duplicates removed.\n\ndef remove_duplicates(lst):",
    "Solution": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))",
    "Score": "1",
    "Input 1": "[1, 2, 2, 3, 4, 4, 5]",
    "Output 1": "[1, 2, 3, 4, 5]",
    "Input 2": "[10, 10, 20, 30, 30]",
    "Output 2": "[10, 20, 30]",
    "Input 3": "[]",
    "Output 3": "[]",
    "Input 4": "[1,1,1,1]",
    "Output 4": "[1]",
    "Input 5": "[5,4,3,2,1]",
    "Output 5": "[5, 4, 3, 2, 1]",
    "Input 6": "[0, 0, 0]",
    "Output 6": "[0]",
    "Input 7": "[7, 8, 7, 8, 9]",
    "Output 7": "[7, 8, 9]",
    "Input 8": "[3, 6, 3, 6, 3]",
    "Output 8": "[3, 6]"
  },
  {
    "Title": "sum_digits_while",
    "Description": "Write a function that takes an integer as an argument and returns the sum of its digits using a while loop.\n\ndef sum_digits_while(n):",
    "Solution": "def sum_digits_while(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total",
    "Score": "1",
    "Input 1": "123",
    "Output 1": "6",
    "Input 2": "456",
    "Output 2": "15",
    "Input 3": "0",
    "Output 3": "0",
    "Input 4": "111",
    "Output 4": "3",
    "Input 5": "789",
    "Output 5": "24",
    "Input 6": "999",
    "Output 6": "27",
    "Input 7": "1001",
    "Output 7": "2",
    "Input 8": "10",
    "Output 8": "1"
  },
  {
    "Title": "count_divisible_numbers",
    "Description": "Write a function that takes a list of numbers and an integer d, and returns how many numbers in the list are divisible by d.\n\ndef count_divisible_numbers(lst, d):",
    "Solution": "def count_divisible_numbers(lst, d):\n    return sum(1 for x in lst if x % d == 0)",
    "Score": "1",
    "Input 1": "([10, 15, 20, 25, 30], 5)",
    "Output 1": "5",
    "Input 2": "([3, 7, 11, 14, 18], 2)",
    "Output 2": "2",
    "Input 3": "([1, 2, 3], 1)",
    "Output 3": "3",
    "Input 4": "([5, 10, 15], 10)",
    "Output 4": "2",
    "Input 5": "([8, 16, 24, 32], 8)",
    "Output 5": "4",
    "Input 6": "([6, 9, 12], 3)",
    "Output 6": "3",
    "Input 7": "([4, 5, 6], 10)",
    "Output 7": "0",
    "Input 8": "([], 3)",
    "Output 8": "0"
  },
  {
    "Title": "reverse_number",
    "Description": "Write a function that takes an integer as an argument and returns the number in reverse order.\n\ndef reverse_number(n):",
    "Solution": "def reverse_number(n):\n    rev = 0\n    while n > 0:\n        rev = rev * 10 + n % 10\n        n //= 10\n    return rev",
    "Score": "1",
    "Input 1": "1234",
    "Output 1": "4321",
    "Input 2": "100",
    "Output 2": "1",
    "Input 3": "1",
    "Output 3": "1",
    "Input 4": "999",
    "Output 4": "999",
    "Input 5": "10",
    "Output 5": "1",
    "Input 6": "456",
    "Output 6": "654",
    "Input 7": "3210",
    "Output 7": "123",
    "Input 8": "2002",
    "Output 8": "2002"
  }
]